#!/usr/bin/env perl 
# -----------------------------------------------------------------------------------------
# Copyright 2012-2013-2013 OnoBase S.a.r.l. (ofa@onobase.com), FreeBSD copyright and disclaimer apply
# -----------------------------------------------------------------------------------------
#
# in-place change $p1 to $p2
#
# Usage: to see usage, type "chgall" without args.  
#
# Author: Olaf AHLERS, 2006
# Modifications:
#    20120315 - OLS: posé ce script
# ------------------------------------------------------------------------------
#
## Name: chgall
##
## In:  file(s)
## Out: file(s)
## Ret: 0
##
## Synopsis: changes <search> to <replace> in files
##
## Usage: [-<opts>] <search> <replace> <file list>
##
##  Options:
##   -d: Delete lines. Takes only one pattern.
##   -R: Regular expression (perl-style). Cancels quoting of pattern 1.
##   -i: ignore case (pattern 1)
##   -B: make backup
##
## Description:
##
##  - Leaves alone files that don't contain the <search> pattern.
##  - an empty replacement is made with ""
##
#

require v5.008;
use Getopt::Std;

if ($#ARGV < 2) {
   print "
    Usage:
    - To replace:
        chgall <pattern 1>  <pattern 2> <file(s)>
    - To delete:
      chgall -d  <pattern> <file(s)>

    By default, the patterns will be automatically quoted
    Only care for shell interpolation ($, * ...)

    Modified files are backed up as <file>.yyyymmddhhmmdd

    Options: 
     -d: Delete lines. Takes only one pattern. 
     -R: Regular expression (perl-style). Cancels quoting of pattern 1. 
     -i: ignore case (pattern 1)
     -B: make no backup
   ";
   exit;
}

getopts('dRiB');
my $p1 = shift;
my $p2 = shift unless $opt_d;
my $match;

foreach my $file (@ARGV) {
   chomp $file;
   print "reading $file\n";
   my $match = 0;
   undef $/;
   open (F,"<$file") or die "Couldn't open file \"$file\" for reading: $!\n";
   my $f = (<F>);
   close F;

   #
   # The following if-block selects the right syntax to do what options and arguments demanded.
   # This is really an uncanny switch that does exactly the same thing with different options. 
   #
   if ($opt_i) {
      if ($opt_d) {
         if ($opt_R) {
            $f =~ s/[^\n]*$p1.*\n//gmi and $match=1;
         } else {
            $f =~ s/[^\n]*\Q$p1\E.*\n//gmi and $match=1;
         }
      } else { 
         if ($opt_R) {
            $f =~ s/$p1/$p2/gmio and $match = 1;
         } else {
            $f =~ s/\Q$p1\E/$p2/gmi and $match = 1;
         }
      }
   } else {
      if ($opt_d) {
         if ($opt_R) {
            $f =~ s/[^\n]*$p1.*\n//gm and $match=1;
         } else {
            $f =~ s/[^\n]*\Q$p1\E.*\n//gm and $match=1;
         }
      } else { 
         if ($opt_R) {
            $f =~ s/$p1/$p2/gmo and $match = 1;
         } else {
            $f =~ s/\Q$p1\E/$p2/gm and $match = 1;
         }
      }
   }

   if ($match) {
      print STDOUT " => writing $file\n";
      $opt_B and system ("cp -p $file ${file}.`date +%Y%m%d%H%M%S`");
      open (F,">$file") or die "Couldn't open file \"$file\" for writing: $!\n";
      print F $f;
   } else {
      print STDOUT " => (no match)\n";
   }
}

